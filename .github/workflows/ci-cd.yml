name: CI/CD Pipeline for Django REST API with Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest  # Runner OS

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'  # Adjust to the Python version you're using

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Set up environment variables for MongoDB (MongoDB Atlas)
      - name: Set environment variables
        run: echo "DATABASE_URL=mongodb+srv://<username>:<password>@cluster0.mongodb.net/<dbname>?retryWrites=true&w=majority" >> $GITHUB_ENV

      # Step 5: Run Django migrations (if applicable)
      - name: Run Django migrations
        run: |
          python manage.py migrate

      # Step 6: Run tests (using Djangoâ€™s test runner or pytest)
      - name: Run tests
        run: |
          python manage.py test  # or use pytest if you prefer

  build:
    runs-on: ubuntu-latest  # Runner OS
    needs: test  # Only run if tests pass
  
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2
  
      # Step 2: Set up Docker Buildx (for multi-platform builds, optional)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
  
      # Step 3: Build Docker image from Dockerfile
      - name: Build Docker image
        run: |
          docker build -t my-django-app:${{ github.sha }} .
          docker images  # This will print the list of images and verify the image was created
  
  deploy:
    runs-on: ubuntu-latest  # Runner OS
    needs: build  # Only run if the build job succeeds
    environment:
      name: production  # GitHub environment, can be changed to "staging" or others
  
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2
  
      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
  
      # Step 3: Login to Docker Hub (Replace with your Docker Hub credentials in GitHub secrets)
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      # Step 4: Check the list of Docker images (for debugging)
      - name: List Docker images (for debugging)
        run: docker images
  
      # Step 5: Tag the Docker image (this assumes the image was built in the build job)
      - name: Tag Docker image
        run: |
          docker tag my-django-app:${{ github.sha }} soham508/my-django-app:${{ github.sha }}
          docker push soham508/my-django-app:${{ github.sha }}
   
      # Step 6: Simulate deployment (dummy check since no cloud instance is available)
      - name: Simulate deployment (dummy check)
        run: |
          echo "Simulating deployment... This step is a placeholder since no cloud instance is available."
          echo "Docker image has been pushed to Docker Hub. Deployment is simulated successfully."

